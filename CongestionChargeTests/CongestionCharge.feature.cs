// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CongestionChargeTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CongestionCharge")]
    public partial class CongestionChargeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CongestionCharge.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CongestionCharge", "In order to pay for a congestion charge\r\nAs a driver\r\nI want to be told the Conge" +
                    "stion Charge for a set period and vehicle type", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Day",
                        "Vehicle",
                        "Start",
                        "End",
                        "Rate"});
            table1.AddRow(new string[] {
                        "AM rate",
                        "Weekday",
                        "FullRateVehicle",
                        "07:00",
                        "12:00",
                        "2.0"});
            table1.AddRow(new string[] {
                        "PM rate",
                        "Weekday",
                        "FullRateVehicle",
                        "12:00",
                        "19:00",
                        "2.5"});
            table1.AddRow(new string[] {
                        "AM rate",
                        "Weekday",
                        "DicountRateVehicle",
                        "07:00",
                        "12:00",
                        "1.0"});
            table1.AddRow(new string[] {
                        "PM rate",
                        "Weekday",
                        "DicountRateVehicle",
                        "12:00",
                        "19:00",
                        "1.0"});
#line 7
testRunner.Given("The Congestion Rates Are", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Car: 24/04/2008 11:32 - 24/04/2008 14:42")]
        public virtual void Car240420081132_240420081442()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Car: 24/04/2008 11:32 - 24/04/2008 14:42", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 16
 testRunner.Given("I am driving a car", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
 testRunner.When("I enter the congestion charge zone at 24/04/2008 11:32", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.And("I leave the congestion charge zone at 24/04/2008 14:42", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Value"});
            table2.AddRow(new string[] {
                        "Charge for 0h 28m (AM rate):",
                        "£0.90"});
            table2.AddRow(new string[] {
                        "Charge for 2h 42m (PM rate):",
                        "£6.70"});
            table2.AddRow(new string[] {
                        "Total Charge:",
                        "£7.60"});
#line 19
 testRunner.Then("I should get the following:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Motorbike: 24/04/2008 17:00 - 24/04/2008 22:11")]
        public virtual void Motorbike240420081700_240420082211()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Motorbike: 24/04/2008 17:00 - 24/04/2008 22:11", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 27
 testRunner.Given("I am driving a Motorbike", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 28
 testRunner.When("I enter the congestion charge zone at 24/04/2008 17:00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.And("I leave the congestion charge zone at 24/04/2008 22:11", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Value"});
            table3.AddRow(new string[] {
                        "Charge for 0h 0m (AM rate):",
                        "£0.00"});
            table3.AddRow(new string[] {
                        "Charge for 2h 0m (PM rate):",
                        "£2.00"});
            table3.AddRow(new string[] {
                        "Total Charge:",
                        "£2.00"});
#line 30
 testRunner.Then("I should get the following:", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Van: 25/04/2008 10:23 - 28/04/2008 09:02")]
        public virtual void Van250420081023_280420080902()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Van: 25/04/2008 10:23 - 28/04/2008 09:02", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 37
 testRunner.Given("I am driving a Van", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
 testRunner.When("I enter the congestion charge zone at 25/04/2008 10:23", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.And("I leave the congestion charge zone at 28/04/2008 09:02", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Value"});
            table4.AddRow(new string[] {
                        "Charge for 3h 39m (AM rate):",
                        "£7.30"});
            table4.AddRow(new string[] {
                        "Charge for 7h 0m (PM rate):",
                        "£17.50"});
            table4.AddRow(new string[] {
                        "Total Charge:",
                        "£24.80"});
#line 40
 testRunner.Then("I should get the following:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
